// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/sqlhandler.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockSQLHandler is a mock of SQLHandler interface
type MockSQLHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSQLHandlerMockRecorder
}

// MockSQLHandlerMockRecorder is the mock recorder for MockSQLHandler
type MockSQLHandlerMockRecorder struct {
	mock *MockSQLHandler
}

// NewMockSQLHandler creates a new mock instance
func NewMockSQLHandler(ctrl *gomock.Controller) *MockSQLHandler {
	mock := &MockSQLHandler{ctrl: ctrl}
	mock.recorder = &MockSQLHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQLHandler) EXPECT() *MockSQLHandlerMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockSQLHandler) Exec(arg0 string, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockSQLHandlerMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockSQLHandler)(nil).Exec), varargs...)
}

// Find mocks base method
func (m *MockSQLHandler) Find(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockSQLHandlerMockRecorder) Find(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSQLHandler)(nil).Find), varargs...)
}

// First mocks base method
func (m *MockSQLHandler) First(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// First indicates an expected call of First
func (mr *MockSQLHandlerMockRecorder) First(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockSQLHandler)(nil).First), varargs...)
}

// Raw mocks base method
func (m *MockSQLHandler) Raw(arg0 string, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Raw indicates an expected call of Raw
func (mr *MockSQLHandlerMockRecorder) Raw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockSQLHandler)(nil).Raw), varargs...)
}

// Create mocks base method
func (m *MockSQLHandler) Create(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockSQLHandlerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSQLHandler)(nil).Create), arg0)
}

// Save mocks base method
func (m *MockSQLHandler) Save(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSQLHandlerMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSQLHandler)(nil).Save), arg0)
}

// Delete mocks base method
func (m *MockSQLHandler) Delete(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSQLHandlerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSQLHandler)(nil).Delete), arg0)
}

// Where mocks base method
func (m *MockSQLHandler) Where(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Where indicates an expected call of Where
func (mr *MockSQLHandlerMockRecorder) Where(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockSQLHandler)(nil).Where), varargs...)
}

// Migrate mocks base method
func (m *MockSQLHandler) Migrate(arg0 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Migrate", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Migrate indicates an expected call of Migrate
func (mr *MockSQLHandlerMockRecorder) Migrate(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockSQLHandler)(nil).Migrate), arg0...)
}
